{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "77b9557c-6f30-44ea-a15b-352810923bf2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# source_sales_analysis\n",
    "\n",
    "# --- Imports ---\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from scipy import stats\n",
    "from sklearn.model_selection import train_test_split, TimeSeriesSplit, cross_val_score\n",
    "from sklearn.preprocessing import StandardScaler, LabelEncoder\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.metrics import mean_squared_error, r2_score\n",
    "from itertools import combinations\n",
    "\n",
    "# --- Data Loading ---\n",
    "data = pd.read_csv('../data/sales_data.csv', encoding='ISO-8859-1')\n",
    "data['ORDERDATE'] = pd.to_datetime(data['ORDERDATE'], errors='coerce')\n",
    "data = data.dropna(subset=['SALES', 'ORDERDATE'])\n",
    "\n",
    "# --- Exploratory Data Analysis (EDA) ---\n",
    "print(data.describe())\n",
    "small_deals = data[data['DEALSIZE'] == 'Small']['SALES']\n",
    "large_deals = data[data['DEALSIZE'] == 'Large']['SALES']\n",
    "t_stat, p_value = stats.ttest_ind(small_deals.dropna(), large_deals.dropna())\n",
    "print(f\"T-test (Small vs Large Deals): t-stat={t_stat:.2f}, p-value={p_value:.4f}\")\n",
    "\n",
    "corr_matrix = data[['SALES', 'QUANTITYORDERED', 'PRICEEACH', 'MSRP']].corr()\n",
    "plt.figure(figsize=(8, 6))\n",
    "sns.heatmap(corr_matrix, annot=True, cmap='coolwarm')\n",
    "plt.title('Correlation Matrix')\n",
    "plt.savefig('../images/correlation_heatmap.png')\n",
    "plt.close()\n",
    "\n",
    "# --- Feature Engineering ---\n",
    "data['ORDER_YEAR'] = data['ORDERDATE'].dt.year\n",
    "data['ORDER_MONTH'] = data['ORDERDATE'].dt.month\n",
    "data['ORDER_MONTH_YEAR'] = data['ORDERDATE'].dt.to_period('M')\n",
    "data['SALES_LAG1'] = data['SALES'].shift(1)\n",
    "data['SALES_ROLLING_7D'] = data['SALES'].rolling(window=7, min_periods=1).mean()\n",
    "le = LabelEncoder()\n",
    "data['PRODUCTLINE_ENCODED'] = le.fit_transform(data['PRODUCTLINE'])\n",
    "data['DEALSIZE_ENCODED'] = le.fit_transform(data['DEALSIZE'])\n",
    "data['PROFIT'] = (data['PRICEEACH'] - data['MSRP']) * data['QUANTITYORDERED']\n",
    "data = data.dropna()\n",
    "data.to_csv('../data/engineered_sales_data.csv', index=False)\n",
    "\n",
    "# --- Visualization ---\n",
    "# 1. Top 10 Customers by Sales\n",
    "customer_summary = data.groupby('CUSTOMERNAME').agg({'SALES': 'sum', 'ORDERNUMBER': 'nunique'}).rename(columns={'ORDERNUMBER': 'ORDER_COUNT'})\n",
    "customer_summary['SEGMENT'] = pd.qcut(customer_summary['SALES'], 3, labels=['Low', 'Medium', 'High'])\n",
    "plt.figure(figsize=(10, 6))\n",
    "sns.barplot(x=customer_summary.nlargest(10, 'SALES').index, y=customer_summary.nlargest(10, 'SALES')['SALES'])\n",
    "plt.xticks(rotation=45)\n",
    "plt.title('Top 10 Customers by Sales')\n",
    "plt.savefig('../images/top_customers.png')\n",
    "plt.close()\n",
    "\n",
    "# 2. Profit by Product Line\n",
    "profit_by_product = data.groupby('PRODUCTLINE')['PROFIT'].sum()\n",
    "plt.figure(figsize=(10, 6))\n",
    "profit_by_product.plot(kind='bar', title='Profit by Product Line')\n",
    "plt.savefig('../images/profit_by_product.png')\n",
    "plt.close()\n",
    "\n",
    "# 3. Top 10 Products by Quantity Ordered\n",
    "stock_movement = data.groupby('PRODUCTCODE')['QUANTITYORDERED'].sum()\n",
    "plt.figure(figsize=(12, 6))\n",
    "stock_movement.nlargest(10).plot(kind='bar', title='Top 10 Products by Quantity Ordered')\n",
    "plt.savefig('../images/stock_movement.png')\n",
    "plt.close()\n",
    "\n",
    "# 4. Average Sales by Month (Seasonality)\n",
    "monthly_avg = data.groupby('ORDER_MONTH')['SALES'].mean()\n",
    "plt.figure(figsize=(10, 6))\n",
    "monthly_avg.plot(kind='bar', title='Average Sales by Month (Seasonality)')\n",
    "plt.savefig('../images/seasonality.png')\n",
    "plt.close()\n",
    "\n",
    "# 5. Order Frequency per Customer\n",
    "repeat_customers = data.groupby('CUSTOMERNAME')['ORDERNUMBER'].nunique()\n",
    "plt.figure(figsize=(10, 6))\n",
    "sns.histplot(repeat_customers, bins=20)\n",
    "plt.title('Order Frequency per Customer')\n",
    "plt.savefig('../images/repeat_customers.png')\n",
    "plt.close()\n",
    "\n",
    "# 6. Sales by Country\n",
    "country_sales = data.groupby('COUNTRY')['SALES'].sum()\n",
    "plt.figure(figsize=(12, 6))\n",
    "country_sales.plot(kind='bar', title='Sales by Country')\n",
    "plt.savefig('../images/sales_by_country.png')\n",
    "plt.close()\n",
    "\n",
    "# 7. Daily Sales Time Series\n",
    "daily_sales = data.groupby('ORDERDATE')['SALES'].sum().reset_index()\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.plot(daily_sales['ORDERDATE'], daily_sales['SALES'], label='Daily Sales')\n",
    "plt.title('Sales Over Time')\n",
    "plt.xticks(rotation=45)\n",
    "plt.legend()\n",
    "plt.savefig('../images/daily_sales_time_series.png')\n",
    "plt.close()\n",
    "\n",
    "# --- Business-Focused Analyses ---\n",
    "print(f\"Repeat Customers (more than 1 order): {(repeat_customers > 1).sum()}\")\n",
    "order_baskets = data.groupby('ORDERNUMBER')['PRODUCTCODE'].apply(list)\n",
    "product_pairs = order_baskets.apply(lambda x: list(combinations(x, 2)))\n",
    "pair_counts = pd.Series([pair for sublist in product_pairs for pair in sublist]).value_counts()\n",
    "print(\"Top 5 Product Pairs:\\n\", pair_counts.head())\n",
    "\n",
    "# --- Machine Learning ---\n",
    "X = data[['QUANTITYORDERED', 'PRICEEACH', 'SALES_LAG1', 'SALES_ROLLING_7D', 'PRODUCTLINE_ENCODED', 'DEALSIZE_ENCODED']]\n",
    "y = data['SALES']\n",
    "train_size = int(len(X) * 0.8)\n",
    "X_train, X_test = X[:train_size], X[train_size:]\n",
    "y_train, y_test = y[:train_size], y[train_size:]\n",
    "\n",
    "pipeline = Pipeline([('scaler', StandardScaler()), ('model', RandomForestRegressor(random_state=42))])\n",
    "pipeline.fit(X_train, y_train)\n",
    "y_pred = pipeline.predict(X_test)\n",
    "print(f\"Pipeline - MSE: {mean_squared_error(y_test, y_pred):.2f}, R2: {r2_score(y_test, y_pred):.2f}\")\n",
    "\n",
    "tscv = TimeSeriesSplit(n_splits=5)\n",
    "cv_scores = cross_val_score(pipeline, X, y, cv=tscv, scoring='r2')\n",
    "print(f\"CV R2 Scores: {cv_scores}, Avg: {cv_scores.mean():.2f}\")\n",
    "\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.plot(y_test.index, y_test, label='Actual Sales')\n",
    "plt.plot(y_test.index, y_pred, label='Predicted Sales')\n",
    "plt.title('Actual vs Predicted Sales')\n",
    "plt.legend()\n",
    "plt.savefig('../images/actual_vs_predicted_sales.png')\n",
    "plt.close()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
